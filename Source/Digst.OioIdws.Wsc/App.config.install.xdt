<?xml version="1.0" encoding="utf-8"?>
<configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
  <configSections xdt:Transform="InsertIfMissing"/>
  <configSections>
    <section name="oioIdwsWcfConfiguration" type="Digst.OioIdws.Wsc.OioWsTrust.Configuration, Digst.OioIdws.Wsc, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" xdt:Transform="InsertIfMissing" xdt:Locator="Match(name)"/>
    <section name="oioIdwsLoggingConfiguration" type="Digst.OioIdws.Common.Logging.Configuration, Digst.OioIdws.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" xdt:Transform="InsertIfMissing" xdt:Locator="Match(name)"/>
  </configSections>
  <oioIdwsWcfConfiguration stsEndpointAddress="{REQURIED}" wspEndpointID="{REQURIED}" tokenLifeTimeInMinutes="{OPTIONAL}" debugMode="{OPTIONAL}" xdt:Transform="InsertIfMissing">
    <clientCertificate storeLocation="{REQURIED}" storeName="{REQURIED}" x509FindType="{REQURIED}" findValue="{REQURIED}"/>
    <stsCertificate storeLocation="{REQURIED}" storeName="{REQURIED}" x509FindType="{REQURIED}" findValue="{REQURIED}"/>
  </oioIdwsWcfConfiguration>
  <oioIdwsLoggingConfiguration logger="{OPTIONAL}" xdt:Transform="InsertIfMissing">
    <!-- 
      The oioIdwsLoggingConfiguration can be used to define a custom logger if logging required to be placed in a single place. See Digst.OioIdws.WscExample for a log4net implementation.
      The oioIdwsLoggingConfiguration configuration section is optional. The logger attribute is also optional. 
      If either the oioIdwsLoggingConfiguration or the logger attribute is not present then the .Net Trace logger is used as default with source name 'Digst.OioIdws'
    -->
  </oioIdwsLoggingConfiguration>
  <system.serviceModel xdt:Transform="InsertIfMissing"/>
  
  <!-- Extentions -->
  <system.serviceModel>
    <extensions xdt:Transform="InsertIfMissing"/>
  </system.serviceModel>
  <system.serviceModel>
    <extensions>
      <bindingExtensions xdt:Transform="InsertIfMissing"/>
    </extensions>
  </system.serviceModel>
  <system.serviceModel>
    <extensions>
      <bindingExtensions>
        <add name="LibBasBinding" type="Digst.OioIdws.LibBas.Bindings.LibBasBindingCollectionElement, Digst.OioIdws.LibBas" xdt:Transform="InsertIfMissing" xdt:Locator="Match(name)"/>
      </bindingExtensions>
    </extensions>
  </system.serviceModel>
  <system.serviceModel>
    <extensions>
      <behaviorExtensions xdt:Transform="InsertIfMissing"/>
    </extensions>
  </system.serviceModel>
  <system.serviceModel>
    <extensions>
      <behaviorExtensions>
        <add name="LibBasBehavior" type="Digst.OioIdws.LibBas.Behaviors.LibBasClientBehaviorExtensionElement, Digst.OioIdws.LibBas" xdt:Transform="InsertIfMissing" xdt:Locator="Match(name)"/>
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
  
  <!-- Behaviors -->
  <system.serviceModel>
    <behaviors xdt:Transform="InsertIfMissing"/>
  </system.serviceModel>
  <system.serviceModel>
    <behaviors>
      <endpointBehaviors xdt:Transform="InsertIfMissing"/>
    </behaviors>
  </system.serviceModel>
  <system.serviceModel>
    <behaviors>
      <endpointBehaviors>
        <behavior name="LibBasBehaviourConfiguration" xdt:Transform="InsertIfMissing" xdt:Locator="Match(name)">
          <clientCredentials>
          <serviceCertificate>
            <scopedCertificates>
              <!-- Certificate of WSP. Used for checking signature on response. targetURI must match the endpoint address. -->
              <add targetUri="{REQUIRED}" findValue="{REQUIRED}" x509FindType="{REQUIRED}" storeLocation="{REQUIRED}" storeName="{REQUIRED}"/>
            </scopedCertificates>
          </serviceCertificate>
          </clientCredentials>

          <!--Endpoints can only point to a single behaviour configuration. Hence, we need to include the LibBasBehavior in a existing behavior-->
          <LibBasBehavior/>
        </behavior>
      </endpointBehaviors>
    </behaviors>
  </system.serviceModel>

  <!-- Bindings -->
  <system.serviceModel>
    <bindings xdt:Transform="InsertIfMissing"/>
  </system.serviceModel>
  <system.serviceModel>
    <bindings>
      <LibBasBinding xdt:Transform="InsertIfMissing">
        <!-- useHttps must be true in production but can be set to false under development -->
        <!-- A default value of 65536 bytes are used if maxReceivedMessageSize is not specified or the empty string is specified. -->
        <binding  name="LibBasBindingConfiguration" useHttps="true" maxReceivedMessageSize="{OPTIONAL}"/>
      </LibBasBinding>
    </bindings>
  </system.serviceModel>
  
  <!-- Clients -->
  <system.serviceModel>
    <client xdt:Transform="InsertIfMissing"/>
  </system.serviceModel>
  <system.serviceModel>
    <client>
      <endpoint address="{REQUIRED}" binding="LibBasBinding" bindingConfiguration="LibBasBindingConfiguration" contract="{REQUIRED}" behaviorConfiguration="LibBasBehaviourConfiguration" xdt:Transform="InsertIfMissing" xdt:Locator="Match(binding)">
        <identity>
          <!--Common name specified in certificate that identifies the WSP. Should not be necessary due to WSP cerficate already being configured ... but is required by WIF. -->
          <dns value="{REQUIRED}" />
        </identity>
      </endpoint>
    </client>
  </system.serviceModel>
  
</configuration>

