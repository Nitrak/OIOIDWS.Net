<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="system.identityModel"
      type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
  </configSections>
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel" switchValue="Information">
        <listeners>
          <add name="ServiceModelMessageLoggingListener"/>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging">
        <listeners>
          <add name="ServiceModelMessageLoggingListener"/>
        </listeners>
      </source>
      <source name="Digst.OioIdws" switchValue="Information">
        <listeners>
          <add name="ServiceModelMessageLoggingListener"/>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="C:\temp\Digst.OioIdws.WspExampleNuGet.svclog" name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp"
        type="System.Diagnostics.XmlWriterTraceListener, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
        <filter type=""/>
      </add>
    </sharedListeners>
  </system.diagnostics>
  <startup>
    <supportedRuntime sku=".NETFramework,Version=v4.5" version="v4.0"/>
  </startup>
  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="true"/>
    </diagnostics>
    <bindings>
      <LibBasBinding>
        <binding name="LibBasBindingConfiguration" useHttps="false"/>
      </LibBasBinding>
    </bindings>
    <services>
      <service behaviorConfiguration="LibBasServiceBehaviourConfiguration" name="Digst.OioIdws.WspExampleNuGet.HelloWorld">
        <endpoint address="http://127.0.0.1:9091/HelloWorld" behaviorConfiguration="LibBasBehaviourConfiguration" binding="LibBasBinding"
          bindingConfiguration="LibBasBindingConfiguration" contract="Digst.OioIdws.WspExampleNuGet.IHelloWorld"/>
      </service>
    </services>
    <extensions>
      <bindingExtensions>
        <add name="LibBasBinding" type="Digst.OioIdws.LibBas.Bindings.LibBasBindingCollectionElement, Digst.OioIdws.LibBas"/>
      </bindingExtensions>
      <behaviorExtensions>
        <add name="LibBasBehavior" type="Digst.OioIdws.LibBas.Behaviors.LibBasServiceBehaviorExtensionElement, Digst.OioIdws.LibBas"/>
      </behaviorExtensions>
    </extensions>
    <behaviors>
      <endpointBehaviors>
        <behavior name="LibBasBehaviourConfiguration">
          <LibBasBehavior/>
        </behavior>
      </endpointBehaviors>
      <serviceBehaviors>
        <behavior name="LibBasServiceBehaviourConfiguration">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true"/>
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <!--serviceCredentials specifies the certificate used for signing the response to the client-->
          <!--Setting useIdentityConfiguration to true enables WIF (System.IdentityModel configuration) and ensures that the specified service certificate is also used as decrypting key for decrypting the encrypted SAML assertion.-->
          <!--Setting useIdentityConfiguration to true in a service behavior did not work because it happens too late in the pipe line and the service certificate would not be set to be the decrypting key-->
          <!--WIF is also needed in order to support STR transformations when signing and validating signatures. -->
          <serviceCredentials useIdentityConfiguration="true">
            <serviceCertificate findValue="dc35c0466ad606422adff717c9cb8e3274d8772e" storeLocation="LocalMachine" storeName="My" x509FindType="FindByThumbprint"/>
          </serviceCredentials>
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>
  <!--system.identityModel is used by WIF which is enabled by setting useIdentityConfiguration to true under serviceCredentials,-->
  <system.identityModel>
    <identityConfiguration>
      <!--audienceUris specifies this service and is used to check that the SAML token from NemLog-in STS is indeed issued to this service.-->
      <audienceUris>
        <add value="https://wsp.itcrew.dk"/>
      </audienceUris>
      <!--issuerNameRegistry specifies the certificate of the Nemlog-In STS. Both thumbprint and Common Name must be specified.-->
      <!--Issuer certificate is embedded in the encrypted SAML assertion. Hence, it it does not need to be recieved out-of-band and placed in the certificate store-->
      <issuerNameRegistry>
        <trustedIssuers>
          <add name="Digitaliseringsstyrelsen - NemLog-in Test" thumbprint="2e7a061560fa2c5e141a634dc1767dacaeec8d12"/>
        </trustedIssuers>
      </issuerNameRegistry>
      <!--The Saml2SecurityTokenHandler security token handler must be replacded by a custom that handles that the signing certificate reference is the id of the encrypted assertion-->
      <securityTokenHandlers>
        <!--The Saml2SecurityTokenHandler security token handler must be replacded by a custom that handles that the signing certificate reference is the id of the encrypted assertion-->
        <remove type="System.IdentityModel.Tokens.Saml2SecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
        <add type="Digst.OioIdws.Wsp.DecryptedAssertionSupport.DecryptedSaml2SecurityTokenHandler, Digst.OioIdws.Wsp"/>
      </securityTokenHandlers>
    </identityConfiguration>
  </system.identityModel>
</configuration>